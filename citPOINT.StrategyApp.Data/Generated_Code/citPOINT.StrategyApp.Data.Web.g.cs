//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.StrategyApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'ConversationPeriod' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class ConversationPeriod : Entity
    {
        
        private int _id;
        
        private DateTime _maxConversationDate;
        
        private DateTime _minConversationDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMaxConversationDateChanging(DateTime value);
        partial void OnMaxConversationDateChanged();
        partial void OnMinConversationDateChanging(DateTime value);
        partial void OnMinConversationDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPeriod"/> class.
        /// </summary>
        public ConversationPeriod()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxConversationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime MaxConversationDate
        {
            get
            {
                return this._maxConversationDate;
            }
            set
            {
                if ((this._maxConversationDate != value))
                {
                    this.OnMaxConversationDateChanging(value);
                    this.RaiseDataMemberChanging("MaxConversationDate");
                    this.ValidateProperty("MaxConversationDate", value);
                    this._maxConversationDate = value;
                    this.RaiseDataMemberChanged("MaxConversationDate");
                    this.OnMaxConversationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinConversationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime MinConversationDate
        {
            get
            {
                return this._minConversationDate;
            }
            set
            {
                if ((this._minConversationDate != value))
                {
                    this.OnMinConversationDateChanging(value);
                    this.RaiseDataMemberChanging("MinConversationDate");
                    this.ValidateProperty("MinConversationDate", value);
                    this._minConversationDate = value;
                    this.RaiseDataMemberChanged("MinConversationDate");
                    this.OnMinConversationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ConversationStrategySetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class ConversationStrategySetting : Entity
    {
        
        private Nullable<decimal> _betaValue;
        
        private Guid _conversationID;
        
        private Guid _conversationStrategySettingsID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private DateTime _endDate;
        
        private EntityRef<NegotiationStrategySetting> _negotiationStrategySetting;
        
        private Nullable<Guid> _negotiationStrategySettingsID;
        
        private DateTime _startDate;
        
        private EntityRef<StrategyType> _strategyType;
        
        private int _strategyTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBetaValueChanging(Nullable<decimal> value);
        partial void OnBetaValueChanged();
        partial void OnConversationIDChanging(Guid value);
        partial void OnConversationIDChanged();
        partial void OnConversationStrategySettingsIDChanging(Guid value);
        partial void OnConversationStrategySettingsIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnEndDateChanging(DateTime value);
        partial void OnEndDateChanged();
        partial void OnNegotiationStrategySettingsIDChanging(Nullable<Guid> value);
        partial void OnNegotiationStrategySettingsIDChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();
        partial void OnStrategyTypeIDChanging(int value);
        partial void OnStrategyTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationStrategySetting"/> class.
        /// </summary>
        public ConversationStrategySetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BetaValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BetaValue
        {
            get
            {
                return this._betaValue;
            }
            set
            {
                if ((this._betaValue != value))
                {
                    this.OnBetaValueChanging(value);
                    this.RaiseDataMemberChanging("BetaValue");
                    this.ValidateProperty("BetaValue", value);
                    this._betaValue = value;
                    this.RaiseDataMemberChanged("BetaValue");
                    this.OnBetaValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        public Guid ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationStrategySettingsID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationStrategySettingsID
        {
            get
            {
                return this._conversationStrategySettingsID;
            }
            set
            {
                if ((this._conversationStrategySettingsID != value))
                {
                    this.OnConversationStrategySettingsIDChanging(value);
                    this.ValidateProperty("ConversationStrategySettingsID", value);
                    this._conversationStrategySettingsID = value;
                    this.RaisePropertyChanged("ConversationStrategySettingsID");
                    this.OnConversationStrategySettingsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public DateTime EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NegotiationStrategySetting"/> entity.
        /// </summary>
        [Association("NegotiationStrategySetting_ConversationStrategySetting", "NegotiationStrategySettingsID", "NegotiationStrategySettingsID", IsForeignKey=true)]
        [XmlIgnore()]
        public NegotiationStrategySetting NegotiationStrategySetting
        {
            get
            {
                if ((this._negotiationStrategySetting == null))
                {
                    this._negotiationStrategySetting = new EntityRef<NegotiationStrategySetting>(this, "NegotiationStrategySetting", this.FilterNegotiationStrategySetting);
                }
                return this._negotiationStrategySetting.Entity;
            }
            set
            {
                NegotiationStrategySetting previous = this.NegotiationStrategySetting;
                if ((previous != value))
                {
                    this.ValidateProperty("NegotiationStrategySetting", value);
                    if ((previous != null))
                    {
                        this._negotiationStrategySetting.Entity = null;
                        previous.ConversationStrategySettings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationStrategySettingsID = value.NegotiationStrategySettingsID;
                    }
                    else
                    {
                        this.NegotiationStrategySettingsID = default(Nullable<Guid>);
                    }
                    this._negotiationStrategySetting.Entity = value;
                    if ((value != null))
                    {
                        value.ConversationStrategySettings.Add(this);
                    }
                    this.RaisePropertyChanged("NegotiationStrategySetting");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationStrategySettingsID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> NegotiationStrategySettingsID
        {
            get
            {
                return this._negotiationStrategySettingsID;
            }
            set
            {
                if ((this._negotiationStrategySettingsID != value))
                {
                    this.OnNegotiationStrategySettingsIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationStrategySettingsID");
                    this.ValidateProperty("NegotiationStrategySettingsID", value);
                    this._negotiationStrategySettingsID = value;
                    this.RaiseDataMemberChanged("NegotiationStrategySettingsID");
                    this.OnNegotiationStrategySettingsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="StrategyType"/> entity.
        /// </summary>
        [Association("StrategyType_ConversationStrategySetting", "StrategyTypeID", "StrategyTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public StrategyType StrategyType
        {
            get
            {
                if ((this._strategyType == null))
                {
                    this._strategyType = new EntityRef<StrategyType>(this, "StrategyType", this.FilterStrategyType);
                }
                return this._strategyType.Entity;
            }
            set
            {
                StrategyType previous = this.StrategyType;
                if ((previous != value))
                {
                    this.ValidateProperty("StrategyType", value);
                    if ((previous != null))
                    {
                        this._strategyType.Entity = null;
                        previous.ConversationStrategySettings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StrategyTypeID = value.StrategyTypeID;
                    }
                    else
                    {
                        this.StrategyTypeID = default(int);
                    }
                    this._strategyType.Entity = value;
                    if ((value != null))
                    {
                        value.ConversationStrategySettings.Add(this);
                    }
                    this.RaisePropertyChanged("StrategyType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrategyTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int StrategyTypeID
        {
            get
            {
                return this._strategyTypeID;
            }
            set
            {
                if ((this._strategyTypeID != value))
                {
                    this.OnStrategyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("StrategyTypeID");
                    this.ValidateProperty("StrategyTypeID", value);
                    this._strategyTypeID = value;
                    this.RaiseDataMemberChanged("StrategyTypeID");
                    this.OnStrategyTypeIDChanged();
                }
            }
        }
        
        private bool FilterNegotiationStrategySetting(NegotiationStrategySetting entity)
        {
            return (entity.NegotiationStrategySettingsID == this.NegotiationStrategySettingsID);
        }
        
        private bool FilterStrategyType(StrategyType entity)
        {
            return (entity.StrategyTypeID == this.StrategyTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationStrategySettingsID;
        }
    }
    
    /// <summary>
    /// The 'ExpectedTarget' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class ExpectedTarget : Entity
    {
        
        private int _id;
        
        private Status _status;
        
        private decimal _target;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStatusChanging(Status value);
        partial void OnStatusChanged();
        partial void OnTargetChanging(decimal value);
        partial void OnTargetChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpectedTarget"/> class.
        /// </summary>
        public ExpectedTarget()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Status Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Target' value.
        /// </summary>
        [DataMember()]
        public decimal Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    this.OnTargetChanging(value);
                    this.RaiseDataMemberChanging("Target");
                    this.ValidateProperty("Target", value);
                    this._target = value;
                    this.RaiseDataMemberChanged("Target");
                    this.OnTargetChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'LastOfferDetails' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class LastOfferDetails : Entity
    {
        
        private int _id;
        
        private DateTime _offerDate;
        
        private decimal _percentage;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOfferDateChanging(DateTime value);
        partial void OnOfferDateChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LastOfferDetails"/> class.
        /// </summary>
        public LastOfferDetails()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OfferDate' value.
        /// </summary>
        [DataMember()]
        public DateTime OfferDate
        {
            get
            {
                return this._offerDate;
            }
            set
            {
                if ((this._offerDate != value))
                {
                    this.OnOfferDateChanging(value);
                    this.RaiseDataMemberChanging("OfferDate");
                    this.ValidateProperty("OfferDate", value);
                    this._offerDate = value;
                    this.RaiseDataMemberChanged("OfferDate");
                    this.OnOfferDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public decimal Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'NegotiationStrategySetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class NegotiationStrategySetting : Entity
    {
        
        private Nullable<decimal> _betaValue;
        
        private EntityCollection<ConversationStrategySetting> _conversationStrategySettings;
        
        private DateTime _defaultEndDate;
        
        private DateTime _defaultStartDate;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _negotiationID;
        
        private Guid _negotiationStrategySettingsID;
        
        private EntityRef<StrategyType> _strategyType;
        
        private int _strategyTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBetaValueChanging(Nullable<decimal> value);
        partial void OnBetaValueChanged();
        partial void OnDefaultEndDateChanging(DateTime value);
        partial void OnDefaultEndDateChanged();
        partial void OnDefaultStartDateChanging(DateTime value);
        partial void OnDefaultStartDateChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnNegotiationStrategySettingsIDChanging(Guid value);
        partial void OnNegotiationStrategySettingsIDChanged();
        partial void OnStrategyTypeIDChanging(int value);
        partial void OnStrategyTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationStrategySetting"/> class.
        /// </summary>
        public NegotiationStrategySetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BetaValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BetaValue
        {
            get
            {
                return this._betaValue;
            }
            set
            {
                if ((this._betaValue != value))
                {
                    this.OnBetaValueChanging(value);
                    this.RaiseDataMemberChanging("BetaValue");
                    this.ValidateProperty("BetaValue", value);
                    this._betaValue = value;
                    this.RaiseDataMemberChanged("BetaValue");
                    this.OnBetaValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ConversationStrategySetting"/> entities.
        /// </summary>
        [Association("NegotiationStrategySetting_ConversationStrategySetting", "NegotiationStrategySettingsID", "NegotiationStrategySettingsID")]
        [XmlIgnore()]
        public EntityCollection<ConversationStrategySetting> ConversationStrategySettings
        {
            get
            {
                if ((this._conversationStrategySettings == null))
                {
                    this._conversationStrategySettings = new EntityCollection<ConversationStrategySetting>(this, "ConversationStrategySettings", this.FilterConversationStrategySettings, this.AttachConversationStrategySettings, this.DetachConversationStrategySettings);
                }
                return this._conversationStrategySettings;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultEndDate' value.
        /// </summary>
        [DataMember()]
        public DateTime DefaultEndDate
        {
            get
            {
                return this._defaultEndDate;
            }
            set
            {
                if ((this._defaultEndDate != value))
                {
                    this.OnDefaultEndDateChanging(value);
                    this.RaiseDataMemberChanging("DefaultEndDate");
                    this.ValidateProperty("DefaultEndDate", value);
                    this._defaultEndDate = value;
                    this.RaiseDataMemberChanged("DefaultEndDate");
                    this.OnDefaultEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultStartDate' value.
        /// </summary>
        [DataMember()]
        public DateTime DefaultStartDate
        {
            get
            {
                return this._defaultStartDate;
            }
            set
            {
                if ((this._defaultStartDate != value))
                {
                    this.OnDefaultStartDateChanging(value);
                    this.RaiseDataMemberChanging("DefaultStartDate");
                    this.ValidateProperty("DefaultStartDate", value);
                    this._defaultStartDate = value;
                    this.RaiseDataMemberChanged("DefaultStartDate");
                    this.OnDefaultStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationStrategySettingsID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationStrategySettingsID
        {
            get
            {
                return this._negotiationStrategySettingsID;
            }
            set
            {
                if ((this._negotiationStrategySettingsID != value))
                {
                    this.OnNegotiationStrategySettingsIDChanging(value);
                    this.ValidateProperty("NegotiationStrategySettingsID", value);
                    this._negotiationStrategySettingsID = value;
                    this.RaisePropertyChanged("NegotiationStrategySettingsID");
                    this.OnNegotiationStrategySettingsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="StrategyType"/> entity.
        /// </summary>
        [Association("StrategyType_NegotiationStrategySetting", "StrategyTypeID", "StrategyTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public StrategyType StrategyType
        {
            get
            {
                if ((this._strategyType == null))
                {
                    this._strategyType = new EntityRef<StrategyType>(this, "StrategyType", this.FilterStrategyType);
                }
                return this._strategyType.Entity;
            }
            set
            {
                StrategyType previous = this.StrategyType;
                if ((previous != value))
                {
                    this.ValidateProperty("StrategyType", value);
                    if ((previous != null))
                    {
                        this._strategyType.Entity = null;
                        previous.NegotiationStrategySettings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.StrategyTypeID = value.StrategyTypeID;
                    }
                    else
                    {
                        this.StrategyTypeID = default(int);
                    }
                    this._strategyType.Entity = value;
                    if ((value != null))
                    {
                        value.NegotiationStrategySettings.Add(this);
                    }
                    this.RaisePropertyChanged("StrategyType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrategyTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int StrategyTypeID
        {
            get
            {
                return this._strategyTypeID;
            }
            set
            {
                if ((this._strategyTypeID != value))
                {
                    this.OnStrategyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("StrategyTypeID");
                    this.ValidateProperty("StrategyTypeID", value);
                    this._strategyTypeID = value;
                    this.RaiseDataMemberChanged("StrategyTypeID");
                    this.OnStrategyTypeIDChanged();
                }
            }
        }
        
        private void AttachConversationStrategySettings(ConversationStrategySetting entity)
        {
            entity.NegotiationStrategySetting = this;
        }
        
        private void DetachConversationStrategySettings(ConversationStrategySetting entity)
        {
            entity.NegotiationStrategySetting = null;
        }
        
        private bool FilterConversationStrategySettings(ConversationStrategySetting entity)
        {
            return (entity.NegotiationStrategySettingsID == this.NegotiationStrategySettingsID);
        }
        
        private bool FilterStrategyType(StrategyType entity)
        {
            return (entity.StrategyTypeID == this.StrategyTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationStrategySettingsID;
        }
    }
    
    /// <summary>
    /// The 'PreferenceSet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class PreferenceSet : Entity
    {
        
        private decimal _maxPercentage;
        
        private Guid _preferenceID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMaxPercentageChanging(decimal value);
        partial void OnMaxPercentageChanged();
        partial void OnPreferenceIDChanging(Guid value);
        partial void OnPreferenceIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PreferenceSet"/> class.
        /// </summary>
        public PreferenceSet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'MaxPercentage' value.
        /// </summary>
        [DataMember()]
        public decimal MaxPercentage
        {
            get
            {
                return this._maxPercentage;
            }
            set
            {
                if ((this._maxPercentage != value))
                {
                    this.OnMaxPercentageChanging(value);
                    this.RaiseDataMemberChanging("MaxPercentage");
                    this.ValidateProperty("MaxPercentage", value);
                    this._maxPercentage = value;
                    this.RaiseDataMemberChanged("MaxPercentage");
                    this.OnMaxPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid PreferenceID
        {
            get
            {
                return this._preferenceID;
            }
            set
            {
                if ((this._preferenceID != value))
                {
                    this.OnPreferenceIDChanging(value);
                    this.ValidateProperty("PreferenceID", value);
                    this._preferenceID = value;
                    this.RaisePropertyChanged("PreferenceID");
                    this.OnPreferenceIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._preferenceID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public enum Status
    {
        
        [EnumMember()]
        Success = 0,
        
        [EnumMember()]
        Failed = 1,
        
        [EnumMember()]
        DateOutOfPeriod = 2,
        
        [EnumMember()]
        NoSettings = 3,
    }
    
    /// <summary>
    /// The domain context corresponding to the 'StrategyAppService' domain service.
    /// </summary>
    public sealed partial class StrategyAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyAppContext"/> class.
        /// </summary>
        public StrategyAppContext() : 
                this(new WebDomainClient<IStrategyAppServiceContract>(new Uri("citPOINT-StrategyApp-Data-Web-StrategyAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The StrategyAppService service URI.</param>
        public StrategyAppContext(Uri serviceUri) : 
                this(new WebDomainClient<IStrategyAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public StrategyAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationPeriod"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationPeriod> ConversationPeriods
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationPeriod>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationStrategySetting"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationStrategySetting> ConversationStrategySettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationStrategySetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LastOfferDetails"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<LastOfferDetails> LastOfferDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LastOfferDetails>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationStrategySetting"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationStrategySetting> NegotiationStrategySettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationStrategySetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExpectedTarget"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<ExpectedTarget> ExpectedTargets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExpectedTarget>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PreferenceSet"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<PreferenceSet> PreferenceSets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PreferenceSet>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StrategyType"/> entities that have been loaded into this <see cref="StrategyAppContext"/> instance.
        /// </summary>
        public EntitySet<StrategyType> StrategyTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StrategyType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationPeriod"/> entities using the 'GetConversationPeriod' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationPeriod"/> entities.</returns>
        public EntityQuery<ConversationPeriod> GetConversationPeriodQuery(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetConversationPeriodQuery", parameters);
            return base.CreateQuery<ConversationPeriod>("GetConversationPeriod", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationStrategySetting"/> entities using the 'GetConversationStrategySettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationStrategySetting"/> entities.</returns>
        public EntityQuery<ConversationStrategySetting> GetConversationStrategySettingsQuery()
        {
            this.ValidateMethod("GetConversationStrategySettingsQuery", null);
            return base.CreateQuery<ConversationStrategySetting>("GetConversationStrategySettings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationStrategySetting"/> entities using the 'GetConversationStrategySettingsByConvID' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationStrategySetting"/> entities.</returns>
        public EntityQuery<ConversationStrategySetting> GetConversationStrategySettingsByConvIDQuery(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetConversationStrategySettingsByConvIDQuery", parameters);
            return base.CreateQuery<ConversationStrategySetting>("GetConversationStrategySettingsByConvID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LastOfferDetails"/> entities using the 'GetLastOfferForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LastOfferDetails"/> entities.</returns>
        public EntityQuery<LastOfferDetails> GetLastOfferForConversationQuery(Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetLastOfferForConversationQuery", parameters);
            return base.CreateQuery<LastOfferDetails>("GetLastOfferForConversation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationPeriod"/> entities using the 'GetNegotiationPeriod' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationPeriod"/> entities.</returns>
        public EntityQuery<ConversationPeriod> GetNegotiationPeriodQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetNegotiationPeriodQuery", parameters);
            return base.CreateQuery<ConversationPeriod>("GetNegotiationPeriod", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationStrategySetting"/> entities using the 'GetNegotiationStrategySettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationStrategySetting"/> entities.</returns>
        public EntityQuery<NegotiationStrategySetting> GetNegotiationStrategySettingsQuery()
        {
            this.ValidateMethod("GetNegotiationStrategySettingsQuery", null);
            return base.CreateQuery<NegotiationStrategySetting>("GetNegotiationStrategySettings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationStrategySetting"/> entities using the 'GetNegotiationStrategySettingsByNegID' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationStrategySetting"/> entities.</returns>
        public EntityQuery<NegotiationStrategySetting> GetNegotiationStrategySettingsByNegIDQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetNegotiationStrategySettingsByNegIDQuery", parameters);
            return base.CreateQuery<NegotiationStrategySetting>("GetNegotiationStrategySettingsByNegID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForConversation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <param name="currentDate">The value for the 'currentDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForConversationQuery(Guid negotiationID, Guid conversationID, decimal maxPercentage, DateTime currentDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("maxPercentage", maxPercentage);
            parameters.Add("currentDate", currentDate);
            this.ValidateMethod("GetNextExpectedTargetForConversationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForConversation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <param name="currentDate">The value for the 'currentDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForNegotiationQuery(Guid negotiationID, decimal maxPercentage, DateTime currentDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("maxPercentage", maxPercentage);
            parameters.Add("currentDate", currentDate);
            this.ValidateMethod("GetNextExpectedTargetForNegotiationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForNegotiation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSet"/> entities using the 'GetPreferenceSetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSet"/> entities.</returns>
        public EntityQuery<PreferenceSet> GetPreferenceSetForNegotiationQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetPreferenceSetForNegotiationQuery", parameters);
            return base.CreateQuery<PreferenceSet>("GetPreferenceSetForNegotiation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StrategyType"/> entities using the 'GetStrategyTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StrategyType"/> entities.</returns>
        public EntityQuery<StrategyType> GetStrategyTypesQuery()
        {
            this.ValidateMethod("GetStrategyTypesQuery", null);
            return base.CreateQuery<StrategyType>("GetStrategyTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new StrategyAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'StrategyAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IStrategyAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationPeriod' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetConversationPeriodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetConversationPeriod", ReplyAction="http://tempuri.org/StrategyAppService/GetConversationPeriodResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationPeriod(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationPeriod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationPeriod'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationPeriod' operation.</returns>
            QueryResult<ConversationPeriod> EndGetConversationPeriod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationStrategySettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetConversationStrategySettingsDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetConversationStrategySettings", ReplyAction="http://tempuri.org/StrategyAppService/GetConversationStrategySettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationStrategySettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationStrategySettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationStrategySettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationStrategySettings' operation.</returns>
            QueryResult<ConversationStrategySetting> EndGetConversationStrategySettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationStrategySettingsByConvID' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetConversationStrategySettingsByConvIDDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetConversationStrategySettingsByConvID", ReplyAction="http://tempuri.org/StrategyAppService/GetConversationStrategySettingsByConvIDResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetConversationStrategySettingsByConvID(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationStrategySettingsByConvID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationStrategySettingsByConvID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationStrategySettingsByConvID' operation.</returns>
            QueryResult<ConversationStrategySetting> EndGetConversationStrategySettingsByConvID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLastOfferForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetLastOfferForConversationDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetLastOfferForConversation", ReplyAction="http://tempuri.org/StrategyAppService/GetLastOfferForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetLastOfferForConversation(Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLastOfferForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLastOfferForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLastOfferForConversation' operation.</returns>
            QueryResult<LastOfferDetails> EndGetLastOfferForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationPeriod' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetNegotiationPeriodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetNegotiationPeriod", ReplyAction="http://tempuri.org/StrategyAppService/GetNegotiationPeriodResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationPeriod(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationPeriod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationPeriod'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationPeriod' operation.</returns>
            QueryResult<ConversationPeriod> EndGetNegotiationPeriod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationStrategySettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettingsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettings", ReplyAction="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationStrategySettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationStrategySettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationStrategySettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationStrategySettings' operation.</returns>
            QueryResult<NegotiationStrategySetting> EndGetNegotiationStrategySettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationStrategySettingsByNegID' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettingsByNegIDDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettingsByNegID", ReplyAction="http://tempuri.org/StrategyAppService/GetNegotiationStrategySettingsByNegIDRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationStrategySettingsByNegID(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationStrategySettingsByNegID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationStrategySettingsByNegID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationStrategySettingsByNegID' operation.</returns>
            QueryResult<NegotiationStrategySetting> EndGetNegotiationStrategySettingsByNegID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForConversation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="currentDate">The value for the 'currentDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForConversationDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForConversation", ReplyAction="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForConversationRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForConversation(Guid negotiationID, Guid conversationID, decimal maxPercentage, DateTime currentDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForConversation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="currentDate">The value for the 'currentDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForNegotiationDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForNegotiation", ReplyAction="http://tempuri.org/StrategyAppService/GetNextExpectedTargetForNegotiationResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForNegotiation(Guid negotiationID, decimal maxPercentage, DateTime currentDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForNegotiation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetPreferenceSetForNegotiationDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetPreferenceSetForNegotiation", ReplyAction="http://tempuri.org/StrategyAppService/GetPreferenceSetForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetForNegotiation(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetForNegotiation' operation.</returns>
            QueryResult<PreferenceSet> EndGetPreferenceSetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStrategyTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/GetStrategyTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/GetStrategyTypes", ReplyAction="http://tempuri.org/StrategyAppService/GetStrategyTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetStrategyTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStrategyTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStrategyTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStrategyTypes' operation.</returns>
            QueryResult<StrategyType> EndGetStrategyTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/StrategyAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/StrategyAppService/SubmitChanges", ReplyAction="http://tempuri.org/StrategyAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class StrategyAppContextEntityContainer : EntityContainer
        {
            
            public StrategyAppContextEntityContainer()
            {
                this.CreateEntitySet<ConversationPeriod>(EntitySetOperations.None);
                this.CreateEntitySet<ConversationStrategySetting>(EntitySetOperations.All);
                this.CreateEntitySet<ExpectedTarget>(EntitySetOperations.None);
                this.CreateEntitySet<LastOfferDetails>(EntitySetOperations.None);
                this.CreateEntitySet<NegotiationStrategySetting>(EntitySetOperations.All);
                this.CreateEntitySet<PreferenceSet>(EntitySetOperations.None);
                this.CreateEntitySet<StrategyType>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'StrategyType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.StrategyApp.Data.Web")]
    public sealed partial class StrategyType : Entity
    {
        
        private Nullable<decimal> _beta;
        
        private EntityCollection<ConversationStrategySetting> _conversationStrategySettings;
        
        private EntityCollection<NegotiationStrategySetting> _negotiationStrategySettings;
        
        private int _strategyTypeID;
        
        private string _strategyTypeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBetaChanging(Nullable<decimal> value);
        partial void OnBetaChanged();
        partial void OnStrategyTypeIDChanging(int value);
        partial void OnStrategyTypeIDChanged();
        partial void OnStrategyTypeNameChanging(string value);
        partial void OnStrategyTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyType"/> class.
        /// </summary>
        public StrategyType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Beta' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Beta
        {
            get
            {
                return this._beta;
            }
            set
            {
                if ((this._beta != value))
                {
                    this.OnBetaChanging(value);
                    this.RaiseDataMemberChanging("Beta");
                    this.ValidateProperty("Beta", value);
                    this._beta = value;
                    this.RaiseDataMemberChanged("Beta");
                    this.OnBetaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ConversationStrategySetting"/> entities.
        /// </summary>
        [Association("StrategyType_ConversationStrategySetting", "StrategyTypeID", "StrategyTypeID")]
        [XmlIgnore()]
        public EntityCollection<ConversationStrategySetting> ConversationStrategySettings
        {
            get
            {
                if ((this._conversationStrategySettings == null))
                {
                    this._conversationStrategySettings = new EntityCollection<ConversationStrategySetting>(this, "ConversationStrategySettings", this.FilterConversationStrategySettings, this.AttachConversationStrategySettings, this.DetachConversationStrategySettings);
                }
                return this._conversationStrategySettings;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegotiationStrategySetting"/> entities.
        /// </summary>
        [Association("StrategyType_NegotiationStrategySetting", "StrategyTypeID", "StrategyTypeID")]
        [XmlIgnore()]
        public EntityCollection<NegotiationStrategySetting> NegotiationStrategySettings
        {
            get
            {
                if ((this._negotiationStrategySettings == null))
                {
                    this._negotiationStrategySettings = new EntityCollection<NegotiationStrategySetting>(this, "NegotiationStrategySettings", this.FilterNegotiationStrategySettings, this.AttachNegotiationStrategySettings, this.DetachNegotiationStrategySettings);
                }
                return this._negotiationStrategySettings;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrategyTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int StrategyTypeID
        {
            get
            {
                return this._strategyTypeID;
            }
            set
            {
                if ((this._strategyTypeID != value))
                {
                    this.OnStrategyTypeIDChanging(value);
                    this.ValidateProperty("StrategyTypeID", value);
                    this._strategyTypeID = value;
                    this.RaisePropertyChanged("StrategyTypeID");
                    this.OnStrategyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StrategyTypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string StrategyTypeName
        {
            get
            {
                return this._strategyTypeName;
            }
            set
            {
                if ((this._strategyTypeName != value))
                {
                    this.OnStrategyTypeNameChanging(value);
                    this.RaiseDataMemberChanging("StrategyTypeName");
                    this.ValidateProperty("StrategyTypeName", value);
                    this._strategyTypeName = value;
                    this.RaiseDataMemberChanged("StrategyTypeName");
                    this.OnStrategyTypeNameChanged();
                }
            }
        }
        
        private void AttachConversationStrategySettings(ConversationStrategySetting entity)
        {
            entity.StrategyType = this;
        }
        
        private void DetachConversationStrategySettings(ConversationStrategySetting entity)
        {
            entity.StrategyType = null;
        }
        
        private bool FilterConversationStrategySettings(ConversationStrategySetting entity)
        {
            return (entity.StrategyTypeID == this.StrategyTypeID);
        }
        
        private void AttachNegotiationStrategySettings(NegotiationStrategySetting entity)
        {
            entity.StrategyType = this;
        }
        
        private void DetachNegotiationStrategySettings(NegotiationStrategySetting entity)
        {
            entity.StrategyType = null;
        }
        
        private bool FilterNegotiationStrategySettings(NegotiationStrategySetting entity)
        {
            return (entity.StrategyTypeID == this.StrategyTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._strategyTypeID;
        }
    }
}
